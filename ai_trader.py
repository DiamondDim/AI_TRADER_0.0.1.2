#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å AI Trader –¥–ª—è MT5
"""

import sys
import os
import time
import argparse
import logging
import numpy as np
from datetime import datetime, timedelta
import MetaTrader5 as mt5
import pandas as pd
from typing import Tuple, Optional, List, Dict

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
sys.path.insert(0, project_root)

try:
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ src.core
    from src.core import (
        MT5, DataFetcher, Trader, setup_logger, Settings,
        get_available_strategies, create_strategy, TradingStrategy,
        RealTimeMonitor  # –ù–û–í–´–ô –ò–ú–ü–û–†–¢
    )
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞:")
    print("   - –§–∞–π–ª src/core/__init__.py –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
    print("   - –í—Å–µ –º–æ–¥—É–ª–∏ –≤ src/core/ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã")
    sys.exit(1)


class AITrader:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å AI Trader"""

    def __init__(self):
        self.logger = setup_logger('AITrader')
        self.settings = Settings()
        self.mt5 = None
        self.data_fetcher = None
        self.trader = None
        self.realtime_monitor = None  # –ù–û–í–´–ô –ê–¢–†–ò–ë–£–¢
        self.running = False
        self.market_available = False
        self.current_strategy = None
        self.available_strategies = get_available_strategies()
        self.monitoring_symbols = []  # –ù–û–í–´–ô –ê–¢–†–ò–ë–£–¢

    def check_market_availability(self) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

        Returns:
            Tuple[bool, str]: (–î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ä—ã–Ω–æ–∫, –°–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MT5
            if not self.mt5.check_connection():
                return False, "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MT5"

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            all_symbols = mt5.symbols_get()
            if not all_symbols:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç MT5"

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            test_symbols = [symbol.name for symbol in all_symbols[:10]]
            active_symbols = []

            for symbol in test_symbols:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
                    symbol_info = mt5.symbol_info(symbol)
                    if symbol_info is None:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                    if symbol_info.visible and symbol_info.trade_mode in [mt5.SYMBOL_TRADE_MODE_FULL,
                                                                          mt5.SYMBOL_TRADE_MODE_CLOSEONLY]:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                        tick = mt5.symbol_info_tick(symbol)

                        if tick is not None:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
                            tick_time = datetime.fromtimestamp(tick.time)
                            time_diff = datetime.now() - tick_time

                            # –ï—Å–ª–∏ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ - —Ä—ã–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω
                            if time_diff.total_seconds() <= 300:  # 5 –º–∏–Ω—É—Ç
                                active_symbols.append(symbol)
                                self.logger.debug(
                                    f"‚úÖ –°–∏–º–≤–æ–ª {symbol} –∞–∫—Ç–∏–≤–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω {time_diff.total_seconds():.0f} —Å–µ–∫ –Ω–∞–∑–∞–¥)")
                            else:
                                self.logger.warning(
                                    f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è {time_diff.total_seconds():.0f} —Å–µ–∫")
                        else:
                            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                            rates = mt5.copy_rates_from_pos(symbol, mt5.TIMEFRAME_M1, 0, 1)
                            if rates is not None and len(rates) > 0:
                                active_symbols.append(symbol)
                                self.logger.debug(f"‚úÖ –°–∏–º–≤–æ–ª {symbol} –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                            else:
                                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è {symbol}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")

                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}: {str(e)}")
                    continue

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–º–≤–æ–ª - —Ä—ã–Ω–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
            if active_symbols:
                self.market_available = True
                message = f"‚úÖ –†—ã–Ω–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏. –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(active_symbols[:3])}"
                self.logger.info(message)
                return True, message
            else:
                self.market_available = False
                message = "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä—ã–Ω–∫—É."
                self.logger.warning(message)
                return False, message

        except Exception as e:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—ã–Ω–∫–∞: {str(e)}"
            self.logger.warning(error_msg)
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä—ã–Ω–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            self.market_available = True
            return True, error_msg

    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Trader...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            try:
                self.settings.validate()
                self.logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
                self.logger.info(f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{self.settings.print_settings()}")
            except ValueError as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                self.logger.info("üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MT5
            self.mt5 = MT5()
            success, message = self.mt5.initialize(
                path=self.settings.MT5_PATH,
                login=self.settings.MT5_LOGIN,
                password=self.settings.MT5_PASSWORD,
                server=self.settings.MT5_SERVER
            )

            if not success:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5: {message}")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
            market_ok, market_message = self.check_market_availability()
            if not market_ok:
                self.logger.warning(
                    "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ä—ã–Ω–∫—É. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")
            else:
                self.logger.info("üéØ –†—ã–Ω–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω. –¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–º–æ–∂–Ω–∞.")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.data_fetcher = DataFetcher(self.mt5)
            self.trader = Trader(self.mt5)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            self.realtime_monitor = RealTimeMonitor(self.data_fetcher)
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
            self.realtime_monitor.subscribe(self._on_market_update)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.set_strategy('simple_ma')

            self.logger.info("‚úÖ AI Trader —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True

        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False

    def _on_market_update(self, market_data: Dict[str, any]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä—ã–Ω–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for symbol, data in market_data['symbols'].items():
                change = data.get('price_change', 0)
                if abs(change) > 0.5:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    self.logger.info(f"üìä {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ {change:.2f}%")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
            if getattr(self.settings, 'AUTO_TRADING_ENABLED', False):
                self._process_real_time_signals(market_data)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}")

    def _process_real_time_signals(self, market_data: Dict[str, any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            for symbol, data in market_data['symbols'].items():
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                historical_data = self.data_fetcher.get_rates(symbol, 'M5', count=100)
                if historical_data is None or historical_data.empty:
                    continue

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                historical_data = self.calculate_advanced_indicators(historical_data)
                signal_info = self.current_strategy.generate_signal(historical_data)

                # –ï—Å–ª–∏ —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª - –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
                if signal_info.get('strength', 0) > 70:
                    signal = signal_info.get('signal', 'HOLD')
                    if signal in ['BUY', 'SELL']:
                        self.logger.info(f"üéØ –†–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signal} –¥–ª—è {symbol} (—Å–∏–ª–∞: {signal_info['strength']}%)")
                        self._execute_trade(symbol, signal.lower(), signal_info['strength'])

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def set_strategy(self, strategy_id: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if strategy_id not in self.available_strategies:
                self.logger.error(f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è '{strategy_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            self.current_strategy = create_strategy(strategy_id)
            self.logger.info(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.current_strategy.name}")
            self.logger.info(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {self.current_strategy.description}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False

    def select_strategy(self) -> Optional[str]:
        """–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"""
        try:
            strategies = self.available_strategies
            if not strategies:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
                return None

            print("\nüéØ –î–û–°–¢–£–ü–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:")
            print("=" * 50)
            for i, (strategy_id, strategy_name) in enumerate(strategies.items(), 1):
                print(f"{i}. {strategy_name} ({strategy_id})")

            print("=" * 50)

            while True:
                choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (–Ω–æ–º–µ—Ä –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä): ").strip()

                if choice.isdigit():
                    index = int(choice) - 1
                    strategy_ids = list(strategies.keys())
                    if 0 <= index < len(strategy_ids):
                        selected_id = strategy_ids[index]
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategies[selected_id]}")
                        return selected_id
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    if choice in strategies:
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategies[choice]}")
                        return choice
                    else:
                        print("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return None

    def calculate_advanced_indicators(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        –†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        try:
            if self.current_strategy:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                data = self.current_strategy.calculate_indicators(data)
                self.logger.info(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{self.current_strategy.name}' —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                data = self._calculate_default_indicators(data)

            return data

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return data

    def _calculate_default_indicators(self, data: pd.DataFrame) -> pd.DataFrame:
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        try:
            df = data.copy()

            # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if 'rsi' not in df.columns:
                df = self.data_fetcher.calculate_technical_indicators(df)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            exp1 = df['close'].ewm(span=12).mean()
            exp2 = df['close'].ewm(span=26).mean()
            df['macd'] = exp1 - exp2
            df['macd_signal'] = df['macd'].ewm(span=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']

            df['bb_middle'] = df['close'].rolling(window=20).mean()
            bb_std = df['close'].rolling(window=20).std()
            df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
            df['bb_lower'] = df['bb_middle'] - (bb_std * 2)

            self.logger.info("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")
            return df

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return data

    def run_training(self, symbol: str, timeframe: str) -> Optional[pd.DataFrame]:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ 5-6 –Ω–µ–¥–µ–ª—å"""
        try:
            self.logger.info(f"üéì –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è {symbol} {timeframe}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
            if not self.market_available:
                self.logger.warning("‚ö†Ô∏è –†—ã–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º.")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É 6 –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥
            end_date = datetime.now()
            start_date = end_date - timedelta(weeks=6)

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.data_fetcher.get_rates(symbol, timeframe, start_date=start_date, end_date=end_date)
            if data is None or data.empty:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            data = self.data_fetcher.calculate_technical_indicators(data)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            data = self.calculate_advanced_indicators(data)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            analysis = self.analyze_training_data(data)

            self.logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –±–∞—Ä–æ–≤")
            self.logger.info(f"üìà –ê–Ω–∞–ª–∏–∑: {analysis}")

            return data

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return None

    def analyze_training_data(self, data: pd.DataFrame) -> str:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if 'range' in data.columns:
                volatility = data['range'].mean()
            else:
                # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ range –Ω–µ—Ç, –≤—ã—á–∏—Å–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü—É High-Low
                data['range'] = data['high'] - data['low']
                volatility = data['range'].mean()

            avg_volume = data['tick_volume'].mean() if 'tick_volume' in data.columns else 0
            trend = "–í–û–°–•–û–î–Ø–©–ò–ô" if data['close'].iloc[-1] > data['close'].iloc[0] else "–ù–ò–°–•–û–î–Ø–©–ò–ô"

            # –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            rsi_current = data['rsi'].iloc[-1] if 'rsi' in data.columns else 50
            rsi_signal = "–ü–ï–†–ï–ü–†–û–î–ê–ù" if rsi_current < 30 else "–ü–ï–†–ï–ö–£–ü–õ–ï–ù" if rsi_current > 70 else "–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô"

            # –ê–Ω–∞–ª–∏–∑ MACD
            macd_signal = "–ë–´–ß–ò–ô" if data['macd'].iloc[-1] > data['macd_signal'].iloc[-1] else "–ú–ï–î–í–ï–ñ–ò–ô"

            # –ê–Ω–∞–ª–∏–∑ Stochastic
            stoch_signal = "–ü–ï–†–ï–ü–†–û–î–ê–ù" if data['stoch_k'].iloc[-1] < 20 else "–ü–ï–†–ï–ö–£–ü–õ–ï–ù" if data['stoch_k'].iloc[
                                                                                                  -1] > 80 else "–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô"

            return (f"–¢—Ä–µ–Ω–¥: {trend}, –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.5f}, "
                    f"RSI: {rsi_signal} ({rsi_current:.1f}), "
                    f"MACD: {macd_signal}, Stochastic: {stoch_signal}")

        except Exception as e:
            return f"–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}"

    def analyze_market(self, symbol: str, timeframe: str) -> Dict[str, any]:
        """
        –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        """
        try:
            self.logger.info(f"üîç –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol} {timeframe}")

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.data_fetcher.get_rates(symbol, timeframe, count=200)
            if data is None or data.empty:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return {}

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            data = self.data_fetcher.calculate_technical_indicators(data)
            data = self.calculate_advanced_indicators(data)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            latest = data.iloc[-1]
            previous = data.iloc[-2]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
            analysis = {
                'symbol': symbol,
                'timeframe': timeframe,
                'current_price': latest['close'],
                'timestamp': datetime.now(),
                'indicators': {},
                'signals': {},
                'prediction': {},
                'recommendation': ''
            }

            # –ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            analysis['indicators'] = self._analyze_indicators(latest, previous)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            analysis['signals'] = self._generate_signals(latest, previous)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            analysis['prediction'] = self._generate_prediction(analysis['signals'])

            # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            analysis['recommendation'] = self._get_final_recommendation(analysis)

            return analysis

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return {}

    def _analyze_indicators(self, latest: pd.Series, previous: pd.Series) -> Dict[str, any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        indicators = {}

        try:
            # RSI –∞–Ω–∞–ª–∏–∑
            rsi = latest.get('rsi', 50)
            if rsi < 30:
                indicators['rsi'] = {'value': rsi, 'signal': 'OVERSOLD', 'strength': 'STRONG'}
            elif rsi > 70:
                indicators['rsi'] = {'value': rsi, 'signal': 'OVERBOUGHT', 'strength': 'STRONG'}
            else:
                indicators['rsi'] = {'value': rsi, 'signal': 'NEUTRAL', 'strength': 'WEAK'}

            # MACD –∞–Ω–∞–ª–∏–∑
            macd = latest.get('macd', 0)
            macd_signal = latest.get('macd_signal', 0)
            if macd > macd_signal and previous.get('macd', 0) <= previous.get('macd_signal', 0):
                indicators['macd'] = {'value': macd, 'signal': 'BULLISH_CROSSOVER', 'strength': 'STRONG'}
            elif macd < macd_signal and previous.get('macd', 0) >= previous.get('macd_signal', 0):
                indicators['macd'] = {'value': macd, 'signal': 'BEARISH_CROSSOVER', 'strength': 'STRONG'}
            else:
                indicators['macd'] = {'value': macd, 'signal': 'NEUTRAL', 'strength': 'WEAK'}

            # Bollinger Bands –∞–Ω–∞–ª–∏–∑
            price = latest['close']
            bb_upper = latest.get('bb_upper', price)
            bb_lower = latest.get('bb_lower', price)
            if price <= bb_lower:
                indicators['bollinger'] = {'value': price, 'signal': 'OVERSOLD', 'strength': 'STRONG'}
            elif price >= bb_upper:
                indicators['bollinger'] = {'value': price, 'signal': 'OVERBOUGHT', 'strength': 'STRONG'}
            else:
                indicators['bollinger'] = {'value': price, 'signal': 'NEUTRAL', 'strength': 'WEAK'}

            # Stochastic –∞–Ω–∞–ª–∏–∑
            stoch_k = latest.get('stoch_k', 50)
            stoch_d = latest.get('stoch_d', 50)
            if stoch_k < 20 and stoch_d < 20:
                indicators['stochastic'] = {'value': stoch_k, 'signal': 'OVERSOLD', 'strength': 'STRONG'}
            elif stoch_k > 80 and stoch_d > 80:
                indicators['stochastic'] = {'value': stoch_k, 'signal': 'OVERBOUGHT', 'strength': 'STRONG'}
            else:
                indicators['stochastic'] = {'value': stoch_k, 'signal': 'NEUTRAL', 'strength': 'WEAK'}

            # Ichimoku –∞–Ω–∞–ª–∏–∑
            tenkan = latest.get('ichi_tenkan', price)
            kijun = latest.get('ichi_kijun', price)
            if price > tenkan and price > kijun:
                indicators['ichimoku'] = {'value': price, 'signal': 'BULLISH', 'strength': 'MEDIUM'}
            elif price < tenkan and price < kijun:
                indicators['ichimoku'] = {'value': price, 'signal': 'BEARISH', 'strength': 'MEDIUM'}
            else:
                indicators['ichimoku'] = {'value': price, 'signal': 'NEUTRAL', 'strength': 'WEAK'}

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")

        return indicators

    def _generate_signals(self, latest: pd.Series, previous: pd.Series) -> Dict[str, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = {'buy': 0, 'sell': 0, 'neutral': 0}

        try:
            # RSI —Å–∏–≥–Ω–∞–ª—ã
            rsi = latest.get('rsi', 50)
            if rsi < 30:
                signals['buy'] += 2
            elif rsi > 70:
                signals['sell'] += 2
            else:
                signals['neutral'] += 1

            # MACD —Å–∏–≥–Ω–∞–ª—ã
            macd = latest.get('macd', 0)
            macd_signal = latest.get('macd_signal', 0)
            prev_macd = previous.get('macd', 0)
            prev_signal = previous.get('macd_signal', 0)

            if macd > macd_signal and prev_macd <= prev_signal:
                signals['buy'] += 3  # –ë—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            elif macd < macd_signal and prev_macd >= prev_signal:
                signals['sell'] += 3  # –ú–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ

            # Bollinger Bands —Å–∏–≥–Ω–∞–ª—ã
            price = latest['close']
            bb_lower = latest.get('bb_lower', price)
            bb_upper = latest.get('bb_upper', price)

            if price <= bb_lower:
                signals['buy'] += 2
            elif price >= bb_upper:
                signals['sell'] += 2

            # Stochastic —Å–∏–≥–Ω–∞–ª—ã
            stoch_k = latest.get('stoch_k', 50)
            stoch_d = latest.get('stoch_d', 50)

            if stoch_k < 20 and stoch_d < 20:
                signals['buy'] += 1
            elif stoch_k > 80 and stoch_d > 80:
                signals['sell'] += 1

            # Parabolic SAR —Å–∏–≥–Ω–∞–ª—ã
            psar_trend = latest.get('psar_trend', 0)
            if psar_trend == 1:
                signals['buy'] += 1
            elif psar_trend == -1:
                signals['sell'] += 1

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

        return signals

    def _generate_prediction(self, signals: Dict[str, int]) -> Dict[str, any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        prediction = {}

        try:
            if self.current_strategy:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                strategy_params = self.current_strategy.get_prediction_parameters()
                confidence_threshold = strategy_params.get('confidence_threshold', 60)
                default_timeframe = strategy_params.get('timeframe', 'MEDIUM')
                risk_level = strategy_params.get('risk_level', 'MEDIUM')
            else:
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                confidence_threshold = 60
                default_timeframe = 'MEDIUM'
                risk_level = 'MEDIUM'

            buy_signals = signals.get('buy', 0)
            sell_signals = signals.get('sell', 0)
            neutral_signals = signals.get('neutral', 0)

            total_signals = buy_signals + sell_signals + neutral_signals
            if total_signals == 0:
                return {
                    'direction': 'NEUTRAL',
                    'confidence': 0,
                    'timeframe': default_timeframe,
                    'risk_level': risk_level
                }

            buy_ratio = buy_signals / total_signals * 100
            sell_ratio = sell_signals / total_signals * 100

            if buy_ratio > confidence_threshold:
                prediction['direction'] = 'BULLISH'
                prediction['confidence'] = min(int(buy_ratio), 95)
            elif sell_ratio > confidence_threshold:
                prediction['direction'] = 'BEARISH'
                prediction['confidence'] = min(int(sell_ratio), 95)
            else:
                prediction['direction'] = 'NEUTRAL'
                prediction['confidence'] = max(neutral_signals * 10, 50)

            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if prediction['confidence'] > 80:
                prediction['timeframe'] = 'LONG'
            elif prediction['confidence'] > 60:
                prediction['timeframe'] = 'MEDIUM'
            else:
                prediction['timeframe'] = 'SHORT'

            prediction['risk_level'] = risk_level
            prediction['strategy'] = self.current_strategy.name if self.current_strategy else 'Standard'

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            prediction = {
                'direction': 'NEUTRAL',
                'confidence': 0,
                'timeframe': 'SHORT',
                'risk_level': 'MEDIUM',
                'strategy': 'Standard'
            }

        return prediction

    def _get_final_recommendation(self, analysis: Dict[str, any]) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        try:
            prediction = analysis.get('prediction', {})
            direction = prediction.get('direction', 'NEUTRAL')
            confidence = prediction.get('confidence', 0)

            if direction == 'BULLISH' and confidence > 70:
                return "üü¢ –°–ò–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê"
            elif direction == 'BULLISH' and confidence > 50:
                return "üü° –£–ú–ï–†–ï–ù–ù–ê–Ø –ü–û–ö–£–ü–ö–ê"
            elif direction == 'BEARISH' and confidence > 70:
                return "üî¥ –°–ò–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ñ–ê"
            elif direction == 'BEARISH' and confidence > 50:
                return "üü† –£–ú–ï–†–ï–ù–ù–ê–Ø –ü–†–û–î–ê–ñ–ê"
            else:
                return "‚ö™Ô∏è –£–î–ï–†–ñ–ê–ù–ò–ï"

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
            return "‚ö™Ô∏è –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û"

    def display_market_analysis(self, analysis: Dict[str, any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not analysis:
            self.logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        try:
            print("\n" + "=" * 70)
            print("üéØ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê")
            print("=" * 70)
            print(f"üìä –°–∏–º–≤–æ–ª: {analysis.get('symbol', 'N/A')}")
            print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {analysis.get('timeframe', 'N/A')}")
            print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.current_strategy.name if self.current_strategy else 'Standard'}")
            print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {analysis.get('current_price', 0):.5f}")
            print(f"üïê –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis.get('timestamp', 'N/A')}")

            print("\nüìà –ê–ù–ê–õ–ò–ó –ò–ù–î–ò–ö–ê–¢–û–†–û–í:")
            indicators = analysis.get('indicators', {})
            for indicator, data in indicators.items():
                signal = data.get('signal', 'NEUTRAL')
                value = data.get('value', 0)
                strength = data.get('strength', 'WEAK')
                print(f"   {indicator.upper():<12}: {value:>8.2f} | {signal:<15} | {strength}")

            print("\nüéØ –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´:")
            signals = analysis.get('signals', {})
            print(f"   üìà –ü–æ–∫—É–ø–∫–∞: {signals.get('buy', 0)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            print(f"   üìâ –ü—Ä–æ–¥–∞–∂–∞: {signals.get('sell', 0)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            print(f"   ‚öñÔ∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ: {signals.get('neutral', 0)} —Å–∏–≥–Ω–∞–ª–æ–≤")

            print("\nüîÆ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï:")
            prediction = analysis.get('prediction', {})
            direction_emoji = "üü¢" if prediction.get('direction') == 'BULLISH' else "üî¥" if prediction.get(
                'direction') == 'BEARISH' else "‚ö™Ô∏è"
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_emoji} {prediction.get('direction', 'NEUTRAL')}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 0)}%")
            print(f"   –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç: {prediction.get('timeframe', 'SHORT')}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {prediction.get('risk_level', 'MEDIUM')}")

            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
            recommendation = analysis.get('recommendation', 'N/A')
            print(f"   {recommendation}")
            print("=" * 70)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def training_completion_menu(self, symbol: str, timeframe: str, model: pd.DataFrame):
        """–ú–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
        while True:
            print("\n" + "=" * 50)
            print("üéì –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
            print("=" * 50)
            print("1 - üß™ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤–ª—é")
            print("2 - üéØ –ù–∞—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é")
            print("3 - üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫")
            print("4 - üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            print("=" * 50)

            choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()

            if choice == "1":
                self.run_test_trading(symbol, timeframe, model)
            elif choice == "2":
                self.run_real_trading(symbol, timeframe, model)
            elif choice == "3":
                analysis = self.analyze_market(symbol, timeframe)
                self.display_market_analysis(analysis)
            elif choice == "4":
                break
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 4.")

    def run_test_trading(self, symbol: str, timeframe: str, model: pd.DataFrame):
        """–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ª–æ–≥–æ–≤"""
        try:
            self.logger.info(f"üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol} {timeframe}")

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            log_dir = "Log_tests_sell"
            if not os.path.exists(log_dir):
                os.makedirs(log_dir)

            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª —Å timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            log_file = os.path.join(log_dir, f"test_trading_{symbol}_{timestamp}.log")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            test_logger = logging.getLogger(f'TestTrading_{symbol}_{timestamp}')
            test_logger.setLevel(logging.INFO)
            test_logger.handlers = []  # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

            # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            file_handler = logging.FileHandler(log_file, encoding='utf-8')
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            file_handler.setFormatter(formatter)
            test_logger.addHandler(file_handler)

            test_logger.info("=" * 60)
            test_logger.info(f"üß™ –¢–ï–°–¢–û–í–ê–Ø –¢–û–†–ì–û–í–õ–Ø - {symbol} {timeframe}")
            test_logger.info("=" * 60)
            test_logger.info(f"–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ {len(model) if model is not None else 0} –±–∞—Ä–∞—Ö")
            test_logger.info(f"–ù–∞—á–∞–ª–æ: {datetime.now()}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
            if not self.market_available:
                test_logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†—ã–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è.")

            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            success = self.simulate_trading(symbol, timeframe, test_logger)

            test_logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {datetime.now()}")
            test_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£–°–ü–ï–•' if success else '–û–®–ò–ë–ö–ê'}")
            test_logger.info("=" * 60)

            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
            for handler in test_logger.handlers[:]:
                handler.close()
                test_logger.removeHandler(handler)

            self.logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {log_file}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")

    def simulate_trading(self, symbol: str, timeframe: str, test_logger: logging.Logger) -> bool:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.data_fetcher.get_rates(symbol, timeframe, count=50)
            if data is None or data.empty:
                test_logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if self.current_strategy:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                data = self.current_strategy.calculate_indicators(data)
                signal_info = self.current_strategy.generate_signal(data)
                signal = signal_info.get('signal', 'HOLD')
                description = signal_info.get('description', '')
                test_logger.info(f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.current_strategy.name}")
                test_logger.info(f"üìù {description}")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                signal = self._simple_moving_average_strategy(data)
                test_logger.info("üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (MA)")

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
            current_price = self.data_fetcher.get_current_price(symbol)
            if current_price and isinstance(current_price, dict):
                test_logger.info(
                    f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: Bid={current_price.get('bid', 0):.5f}, Ask={current_price.get('ask', 0):.5f}")
            else:
                test_logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ signal - —Å—Ç—Ä–æ–∫–∞
            if not isinstance(signal, str):
                signal = "HOLD"
                test_logger.warning("‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ HOLD")

            test_logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: {signal}")

            # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤
            if signal == "BUY":
                test_logger.info("üìà –°–ò–ú–£–õ–Ø–¶–ò–Ø: –û—Ç–∫—Ä—ã—Ç–∏–µ BUY –æ—Ä–¥–µ—Ä–∞")
                test_logger.info("üí° –û–±—ä–µ–º: 0.01 –ª–æ—Ç–∞")
                test_logger.info("üõ°Ô∏è Stop Loss: -50 –ø—É–Ω–∫—Ç–æ–≤")
                test_logger.info("üéØ Take Profit: +100 –ø—É–Ω–∫—Ç–æ–≤")

            elif signal == "SELL":
                test_logger.info("üìâ –°–ò–ú–£–õ–Ø–¶–ò–Ø: –û—Ç–∫—Ä—ã—Ç–∏–µ SELL –æ—Ä–¥–µ—Ä–∞")
                test_logger.info("üí° –û–±—ä–µ–º: 0.01 –ª–æ—Ç–∞")
                test_logger.info("üõ°Ô∏è Stop Loss: -50 –ø—É–Ω–∫—Ç–æ–≤")
                test_logger.info("üéØ Take Profit: +100 –ø—É–Ω–∫—Ç–æ–≤")

            else:
                test_logger.info("‚öñÔ∏è –°–ò–ú–£–õ–Ø–¶–ò–Ø: –£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")

            return True

        except Exception as e:
            test_logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
            return False

    def run_real_trading(self, symbol: str, timeframe: str, model: pd.DataFrame):
        """–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π
            if not self.market_available:
                self.logger.error("‚ùå –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: —Ä—ã–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return

            self.logger.info(f"üéØ –ù–∞—á–∞–ª–æ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol} {timeframe}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            self.run_simple_strategy(symbol, timeframe)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")

    def show_account_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            account_info = self.mt5.get_account_info()
            if account_info:
                self.logger.info("=" * 50)
                self.logger.info("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ß–ï–¢–ï")
                self.logger.info("=" * 50)
                self.logger.info(f"üë§ –õ–æ–≥–∏–Ω: {account_info.get('login', 'N/A')}")
                self.logger.info(f"üè¢ –ë—Ä–æ–∫–µ—Ä: {account_info.get('company', 'N/A')}")
                self.logger.info(f"üí≥ –ë–∞–ª–∞–Ω—Å: {account_info.get('balance', 0):.2f} {account_info.get('currency', '')}")
                self.logger.info(f"üìà –≠–∫–≤–∏—Ç–∏: {account_info.get('equity', 0):.2f} {account_info.get('currency', '')}")
                self.logger.info(
                    f"üÜì –°–≤–æ–±–æ–¥–Ω–∞—è –º–∞—Ä–∂–∞: {account_info.get('free_margin', 0):.2f} {account_info.get('currency', '')}")
                self.logger.info(f"‚öñÔ∏è –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: 1:{account_info.get('leverage', 0)}")
                self.logger.info(f"üåê –°–µ—Ä–≤–µ—Ä: {account_info.get('server', 'N/A')}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = self.trader.get_open_positions()
            if positions:
                self.logger.info("=" * 50)
                self.logger.info(f"üìã –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ({len(positions)})")
                self.logger.info("=" * 50)
                total_profit = 0
                for pos in positions:
                    profit = pos.get('profit', 0) + pos.get('swap', 0)
                    total_profit += profit
                    status = "üü¢" if profit >= 0 else "üî¥"
                    self.logger.info(
                        f"{status} {pos.get('symbol', 'N/A')} {pos.get('type', 'N/A')} {pos.get('volume', 0)} –ª–æ—Ç(–æ–≤) | "
                        f"–¶–µ–Ω–∞: {pos.get('open_price', 0):.5f} | –ü—Ä–∏–±—ã–ª—å: {profit:.2f}"
                    )
                self.logger.info(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f}")
            else:
                self.logger.info("üì≠ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {str(e)}")

    def run_simple_strategy(self, symbol: str, timeframe: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
            if not self.market_available:
                self.logger.error(f"‚ùå –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: —Ä—ã–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")
                return

            if not self.current_strategy:
                self.logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é")
                self.set_strategy('simple_ma')

            self.logger.info(f"üéØ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{self.current_strategy.name}' –¥–ª—è {symbol} {timeframe}")

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.data_fetcher.get_rates(symbol, timeframe, count=100)
            if data is None or data.empty:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            data = self.calculate_advanced_indicators(data)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            signal_info = self.current_strategy.generate_signal(data)
            signal = signal_info.get('signal', 'HOLD')
            strength = signal_info.get('strength', 0)
            description = signal_info.get('description', '')

            self.logger.info(f"üìä –°–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {signal} (—Å–∏–ª–∞: {strength:.1f}%)")
            self.logger.info(f"üìù {description}")

            if signal == "BUY":
                self.logger.info(f"üìà –°–∏–≥–Ω–∞–ª BUY –¥–ª—è {symbol}")
                self._execute_trade(symbol, 'buy', strength)

            elif signal == "SELL":
                self.logger.info(f"üìâ –°–∏–≥–Ω–∞–ª SELL –¥–ª—è {symbol}")
                self._execute_trade(symbol, 'sell', strength)
            else:
                self.logger.info(f"‚öñÔ∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")

        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {str(e)}")

    def _execute_trade(self, symbol: str, order_type: str, signal_strength: float):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞ –∏ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
            base_risk = self.settings.RISK_PERCENT
            adjusted_risk = base_risk * (signal_strength / 100.0) if signal_strength > 0 else base_risk

            volume = self.trader.calculate_position_size(
                symbol,
                risk_percent=adjusted_risk,
                stop_loss_pips=self.settings.STOPLOSS_PIPS
            )

            if volume:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
                sl = self.settings.STOPLOSS_PIPS if self.settings.ENABLE_STOPLOSS else 0.0
                tp = self.settings.TAKEPROFIT_PIPS if self.settings.ENABLE_TAKEPROFIT else 0.0

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                if signal_strength > 70:
                    tp = tp * 1.5  # +50% –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                elif signal_strength < 30:
                    sl = sl * 1.2  # +20% —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

                success, message = self.trader.send_order(
                    symbol=symbol,
                    order_type=order_type,
                    volume=volume,
                    stop_loss_pips=sl,
                    take_profit_pips=tp,
                    comment=f"{self.current_strategy.name} (—Å–∏–ª–∞: {signal_strength:.1f}%)"
                )
                if success:
                    self.logger.info(f"‚úÖ {message}")
                else:
                    self.logger.error(f"‚ùå {message}")
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏")

        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}")

    def _simple_moving_average_strategy(self, data: pd.DataFrame, short_window: int = 10, long_window: int = 30) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            if len(data) < long_window:
                return "HOLD"

            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            data['sma_short'] = data['close'].rolling(window=short_window).mean()
            data['sma_long'] = data['close'].rolling(window=long_window).mean()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if len(data) < 2 or data['sma_short'].isna().iloc[-1] or data['sma_long'].isna().iloc[-1]:
                return "HOLD"

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_short = data['sma_short'].iloc[-1]
            current_long = data['sma_long'].iloc[-1]
            previous_short = data['sma_short'].iloc[-2]
            previous_long = data['sma_long'].iloc[-2]

            # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: –∫–æ—Ä–æ—Ç–∫–∞—è MA –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –¥–ª–∏–Ω–Ω—É—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            if previous_short <= previous_long and current_short > current_long:
                return "BUY"

            # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: –∫–æ—Ä–æ—Ç–∫–∞—è MA –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –¥–ª–∏–Ω–Ω—É—é —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
            if previous_short >= previous_long and current_short < current_long:
                return "SELL"

            return "HOLD"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ MA: {str(e)}")
            return "HOLD"

    def run_test_trade(self, symbol: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–æ–π
            if not self.market_available:
                self.logger.error(f"‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: —Ä—ã–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")
                return

            self.logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –¥–ª—è {symbol}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            symbol_info = self.data_fetcher.get_symbol_info(symbol)
            if symbol_info:
                volume = symbol_info.get('volume_min', 0.01)
            else:
                volume = 0.01

            success, message = self.trader.send_order(
                symbol=symbol,
                order_type='buy',
                volume=volume,
                comment="Test Order"
            )

            if success:
                self.logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞: {message}")

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                time.sleep(5)
                positions = self.trader.get_open_positions(symbol)
                for position in positions:
                    if position.get('volume', 0) == volume:
                        self.trader.close_position(position.get('ticket'))
                        break
            else:
                self.logger.error(f"‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {message}")

        except Exception as e:
            self.logger.error(f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏: {str(e)}")

    def close_all_positions_interactive(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≤–≤–æ–¥–æ–º"""
        try:
            symbol = input("–°–∏–º–≤–æ–ª (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö): ").strip()
            if not symbol:
                symbol = ""

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = self.trader.get_open_positions(symbol)
            if not positions:
                self.logger.info("üìù –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
                return

            self.logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏—è—Ö –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            total_profit = sum(pos.get('profit', 0) + pos.get('swap', 0) for pos in positions)
            self.logger.info(f"üí∞ –û–±—â–∏–π P&L –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º: {total_profit:.2f}")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏? (y/N): ").strip().lower()
            if confirm not in ['y', 'yes', '–¥–∞']:
                self.logger.info("‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
            success, message = self.trader.close_all_positions(symbol)
            if success:
                # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if " | " in message:
                    lines = message.split(" | ")
                    self.logger.info("=" * 50)
                    for line in lines:
                        if line.strip():
                            self.logger.info(line)
                    self.logger.info("=" * 50)
                else:
                    self.logger.info(f"‚úÖ {message}")
            else:
                self.logger.error(f"‚ùå {message}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")

    def show_recent_data(self, symbol: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        try:
            data = self.data_fetcher.get_rates(symbol, self.settings.DEFAULT_TIMEFRAME, count=10)
            if data is None or data.empty:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return

            print(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–∞—Ä–æ–≤ –¥–ª—è {symbol}:")
            print(data[['open', 'high', 'low', 'close']].tail(5))
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def training_and_trading_flow(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            print("\nüéØ –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø")
            strategy_id = self.select_strategy()
            if not strategy_id:
                return

            if not self.set_strategy(strategy_id):
                return

            symbol = self.select_symbol()
            if not symbol:
                return

            timeframe = self.select_timeframe()
            if not timeframe:
                return

            print(f"üéì –û–±—É—á–µ–Ω–∏–µ –¥–ª—è {symbol} {timeframe} —Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π '{self.current_strategy.name}'...")
            model = self.run_training(symbol, timeframe)

            if model is not None:
                self.training_completion_menu(symbol, timeframe, model)
            else:
                print("‚ùå –û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")

    def market_analysis_flow(self):
        """–ü–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        try:
            symbol = self.select_symbol()
            if not symbol:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª")
                return

            timeframe = self.select_timeframe()
            if not timeframe:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º")
                return

            print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol} {timeframe}...")
            analysis = self.analyze_market(symbol, timeframe)
            self.display_market_analysis(analysis)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: {e}")

    def strategy_selection_flow(self):
        """–ü–æ—Ç–æ–∫ –≤—ã–±–æ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            print("\nüéØ –í–´–ë–û–† –°–¢–†–ê–¢–ï–ì–ò–ò –¢–û–†–ì–û–í–õ–ò")
            print("=" * 50)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if self.current_strategy:
                print(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.current_strategy.name}")
                print(f"üìù {self.current_strategy.description}")
            else:
                print("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

            print("\n1 - üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
            print("2 - üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
            print("3 - üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            print("=" * 50)

            choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ").strip()

            if choice == "1":
                strategy_id = self.select_strategy()
                if strategy_id:
                    if self.set_strategy(strategy_id):
                        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.current_strategy.name}")
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")

            elif choice == "2":
                self.test_strategy_flow()

            elif choice == "3":
                return

            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    def test_strategy_flow(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if not self.current_strategy:
                print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
                return

            symbol = self.select_symbol()
            if not symbol:
                return

            timeframe = self.select_timeframe()
            if not timeframe:
                return

            print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{self.current_strategy.name}' –Ω–∞ {symbol} {timeframe}...")

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.data_fetcher.get_rates(symbol, timeframe, count=100)
            if data is None or data.empty:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            data = self.calculate_advanced_indicators(data)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signal_info = self.current_strategy.generate_signal(data)

            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print("=" * 40)
            print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.current_strategy.name}")
            print(f"üìà –°–∏–º–≤–æ–ª: {symbol}")
            print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
            print(f"üì° –°–∏–≥–Ω–∞–ª: {signal_info.get('signal', 'N/A')}")
            print(f"üí™ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal_info.get('strength', 0):.1f}%")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {signal_info.get('description', 'N/A')}")
            print("=" * 40)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            if not data.empty:
                print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
                for indicator in self.current_strategy.required_indicators:
                    if indicator in data.columns:
                        value = data[indicator].iloc[-1]
                        print(f"   {indicator}: {value:.4f}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    def start_real_time_monitoring(self, symbols: List[str], update_interval: int = 5):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            self.monitoring_symbols = symbols
            success = self.realtime_monitor.start_monitoring(symbols, update_interval)

            if success:
                self.logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
                return True
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False

    def stop_real_time_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            self.realtime_monitor.stop_monitoring()
            self.logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    def get_market_summary(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä—ã–Ω–∫—É"""
        try:
            if self.realtime_monitor:
                return self.realtime_monitor.get_market_summary()
            else:
                return {}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞: {e}")
            return {}

    def real_time_monitoring_flow(self):
        """–ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            print("\nüéØ –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–´–ù–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
            print("=" * 50)

            # –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            symbols = []
            print("\nüìä –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
            print("1 - –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã")
            print("2 - –ó–æ–ª–æ—Ç–æ –∏ –Ω–µ—Ñ—Ç—å")
            print("3 - –ò–Ω–¥–µ–∫—Å—ã")
            print("4 - –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é")

            choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-4): ").strip()

            if choice == "1":
                symbols = ['EURUSD', 'GBPUSD', 'USDJPY', 'USDCHF', 'AUDUSD', 'USDCAD']
            elif choice == "2":
                symbols = ['XAUUSD', 'XAGUSD', 'XTIUSD', 'XBRUSD']
            elif choice == "3":
                symbols = ['US500', 'US30', 'USTEC', 'DE30']
            elif choice == "4":
                symbols = self._select_multiple_symbols()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                return

            if not symbols:
                print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å–∏–º–≤–æ–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                return

            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
            if self.start_real_time_monitoring(symbols, update_interval=10):
                self._display_real_time_dashboard()
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    def _select_multiple_symbols(self) -> List[str]:
        """–í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            all_symbols = self.data_fetcher.get_symbols()
            if not all_symbols:
                return []

            selected_symbols = []

            while True:
                print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(all_symbols)}")
                print("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ 'done' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
                print("–ü—Ä–∏–º–µ—Ä: EURUSD, GBPUSD, XAUUSD")

                input_str = input("–°–∏–º–≤–æ–ª—ã: ").strip().upper()

                if input_str == 'DONE':
                    break

                symbols_to_add = [s.strip() for s in input_str.split(',')]
                valid_symbols = []

                for symbol in symbols_to_add:
                    if symbol in all_symbols:
                        valid_symbols.append(symbol)
                    else:
                        print(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")

                selected_symbols.extend(valid_symbols)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(valid_symbols)}")
                print(f"üìã –í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ: {len(selected_symbols)}")

            return list(set(selected_symbols))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []

    def _display_real_time_dashboard(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            import os

            while True:
                os.system('cls' if os.name == 'nt' else 'clear')

                summary = self.get_market_summary()
                if not summary:
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    time.sleep(5)
                    continue

                print("=" * 80)
                print("üéØ –î–ê–®–ë–û–†–î –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò - AI TRADER")
                print("=" * 80)
                print(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {summary.get('timestamp', 'N/A')}")
                print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {summary.get('market_state', 'UNKNOWN')}")
                print(f"üìà –ë—ã—á—å–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {summary.get('bullish_count', 0)}")
                print(f"üìâ –ú–µ–¥–≤–µ–∂—å–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {summary.get('bearish_count', 0)}")
                print(f"‚öñÔ∏è –ë–æ–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {summary.get('sideways_count', 0)}")

                print("\nüöÄ –¢–û–ü –î–í–ò–ñ–£–©–ò–•–°–Ø –°–ò–ú–í–û–õ–û–í:")
                print("-" * 50)
                for mover in summary.get('top_movers', [])[:5]:
                    change = mover.get('change', 0)
                    emoji = "üü¢" if change > 0 else "üî¥" if change < 0 else "‚ö™Ô∏è"
                    print(f"{emoji} {mover['symbol']:8} | {change:>+7.2f}% | {mover['current_price']:.5f}")

                print("\n" + "=" * 80)
                print("‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

                time.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            self.stop_real_time_monitoring()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            self.stop_real_time_monitoring()

    def select_symbol(self) -> Optional[str]:
        """–í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"""
        try:
            symbols = self.data_fetcher.get_symbols()
            if not symbols:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤")
                return None

            print("\nüìä –î–û–°–¢–£–ü–ù–´–ï –°–ò–ú–í–û–õ–´:")
            print("=" * 40)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
            forex_symbols = [s for s in symbols if any(
                currency in s for currency in ['USD', 'EUR', 'GBP', 'JPY', 'AUD', 'CAD', 'CHF', 'NZD'])]
            other_symbols = [s for s in symbols if s not in forex_symbols]

            if forex_symbols:
                print("\nüí± –í–ê–õ–Æ–¢–ù–´–ï –ü–ê–†–´:")
                for i, symbol in enumerate(forex_symbols[:15]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                    print(f"  {i + 1}. {symbol}")

            if other_symbols:
                print("\nüìà –î–†–£–ì–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
                for i, symbol in enumerate(other_symbols[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"  {len(forex_symbols) + i + 1}. {symbol}")

            print("\n" + "=" * 40)

            while True:
                choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ): ").strip()

                if choice.isdigit():
                    index = int(choice) - 1
                    if 0 <= index < len(symbols):
                        selected = symbols[index]
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–∏–º–≤–æ–ª: {selected}")
                        return selected
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    # –ò—â–µ–º —Å–∏–º–≤–æ–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    if choice.upper() in symbols:
                        selected = choice.upper()
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–∏–º–≤–æ–ª: {selected}")
                        return selected
                    else:
                        print("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞: {e}")
            return None

    def select_timeframe(self) -> Optional[str]:
        """–í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        timeframes = {
            '1': ('M1', '1 –º–∏–Ω—É—Ç–∞'),
            '2': ('M5', '5 –º–∏–Ω—É—Ç'),
            '3': ('M15', '15 –º–∏–Ω—É—Ç'),
            '4': ('M30', '30 –º–∏–Ω—É—Ç'),
            '5': ('H1', '1 —á–∞—Å'),
            '6': ('H4', '4 —á–∞—Å–∞'),
            '7': ('D1', '1 –¥–µ–Ω—å'),
            '8': ('W1', '1 –Ω–µ–¥–µ–ª—è'),
            '9': ('MN1', '1 –º–µ—Å—è—Ü')
        }

        print("\n‚è∞ –î–û–°–¢–£–ü–ù–´–ï –¢–ê–ô–ú–§–†–ï–ô–ú–´:")
        print("=" * 40)
        for key, (tf, desc) in timeframes.items():
            print(f"  {key}. {tf} - {desc}")
        print("=" * 40)

        while True:
            choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º (1-9): ").strip()

            if choice in timeframes:
                selected_tf = timeframes[choice][0]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º: {selected_tf}")
                return selected_tf
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9.")

    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã AI Trader...")
        if self.realtime_monitor:
            self.stop_real_time_monitoring()
        if self.mt5:
            self.mt5.shutdown()
        self.logger.info("üëã AI Trader –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='AI Trader for MT5')
    parser.add_argument('--symbol', type=str, default=None, help='–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª')
    parser.add_argument('--timeframe', type=str, default='H1', help='–¢–∞–π–º—Ñ—Ä–µ–π–º')
    parser.add_argument('--strategy', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–¥–∏–Ω —Ä–∞–∑')
    parser.add_argument('--test', action='store_true', help='–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É')
    parser.add_argument('--info', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ')
    parser.add_argument('--analyze', action='store_true', help='–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞')

    args = parser.parse_args()

    trader = AITrader()

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not trader.initialize():
            sys.exit(1)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        symbol = args.symbol if args.symbol else trader.settings.DEFAULT_SYMBOL

        if args.info:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
            trader.show_account_info()

        elif args.test:
            # –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞
            trader.run_test_trade(symbol)

        elif args.strategy:
            # –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–¥–∏–Ω —Ä–∞–∑
            trader.run_simple_strategy(symbol, args.timeframe)

        elif args.analyze:
            # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            trader.market_analysis_flow()

        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python main.py' –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  python main.py --info")
            print("  python main.py --test --symbol EURUSD")
            print("  python main.py --strategy --symbol EURUSD --timeframe H1")
            print("  python main.py --analyze --symbol EURUSD --timeframe H1")

    except KeyboardInterrupt:
        trader.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        trader.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        trader.shutdown()


if __name__ == "__main__":
    main()
