#!/usr/bin/env python3
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è AI Trader - –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import sys
import os
import time
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from ai_trader import AITrader


def interactive_menu():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("=" * 60)
    print("üéØ AI TRADER MT5 - –ö–û–ù–°–û–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 60)
    print("1 - üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ")
    print("2 - üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    print("3 - üß™ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É")
    print("4 - üö´ –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏")
    print("5 - üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    print("6 - üéì –û–±—É—á–µ–Ω–∏–µ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è")
    print("7 - üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    print("0 - üö™ –í—ã—Ö–æ–¥")
    print("=" * 60)


def select_symbol_interactive(trader):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        symbols = trader.data_fetcher.get_symbols()
        if not symbols:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤")
            return None

        print("\nüìä –î–û–°–¢–£–ü–ù–´–ï –°–ò–ú–í–û–õ–´:")
        print("=" * 40)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
        forex_symbols = [s for s in symbols if
                         any(currency in s for currency in ['USD', 'EUR', 'GBP', 'JPY', 'AUD', 'CAD', 'CHF', 'NZD'])]
        other_symbols = [s for s in symbols if s not in forex_symbols]

        if forex_symbols:
            print("\nüí± –í–ê–õ–Æ–¢–ù–´–ï –ü–ê–†–´:")
            for i, symbol in enumerate(forex_symbols[:15]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                print(f"  {i + 1}. {symbol}")

        if other_symbols:
            print("\nüìà –î–†–£–ì–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
            for i, symbol in enumerate(other_symbols[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  {len(forex_symbols) + i + 1}. {symbol}")

        print("\n" + "=" * 40)

        while True:
            choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª (–Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ): ").strip()

            if choice.isdigit():
                index = int(choice) - 1
                if 0 <= index < len(symbols):
                    selected = symbols[index]
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–∏–º–≤–æ–ª: {selected}")
                    return selected
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                # –ò—â–µ–º —Å–∏–º–≤–æ–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                if choice.upper() in symbols:
                    selected = choice.upper()
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–∏–º–≤–æ–ª: {selected}")
                    return selected
                else:
                    print("‚ùå –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞: {e}")
        return None


def select_timeframe_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    timeframes = {
        '1': ('M1', '1 –º–∏–Ω—É—Ç–∞'),
        '2': ('M5', '5 –º–∏–Ω—É—Ç'),
        '3': ('M15', '15 –º–∏–Ω—É—Ç'),
        '4': ('M30', '30 –º–∏–Ω—É—Ç'),
        '5': ('H1', '1 —á–∞—Å'),
        '6': ('H4', '4 —á–∞—Å–∞'),
        '7': ('D1', '1 –¥–µ–Ω—å'),
        '8': ('W1', '1 –Ω–µ–¥–µ–ª—è'),
        '9': ('MN1', '1 –º–µ—Å—è—Ü')
    }

    print("\n‚è∞ –î–û–°–¢–£–ü–ù–´–ï –¢–ê–ô–ú–§–†–ï–ô–ú–´:")
    print("=" * 40)
    for key, (tf, desc) in timeframes.items():
        print(f"  {key}. {tf} - {desc}")
    print("=" * 40)

    while True:
        choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º (1-9): ").strip()

        if choice in timeframes:
            selected_tf = timeframes[choice][0]
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º: {selected_tf}")
            return selected_tf
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9.")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='AI Trader for MT5 - Console Version')
    parser.add_argument('--auto', action='store_true', help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º')

    args = parser.parse_args()

    trader = AITrader()

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not trader.initialize():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AI Trader")
            sys.exit(1)

        if args.auto:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
            print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω")
            while True:
                try:
                    trader.run_simple_strategy(
                        trader.settings.DEFAULT_SYMBOL,
                        trader.settings.DEFAULT_TIMEFRAME
                    )
                    time.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                except KeyboardInterrupt:
                    break
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            while True:
                try:
                    interactive_menu()
                    choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-7): ").strip()

                    if choice == "1":
                        trader.show_account_info()

                    elif choice == "2":
                        # –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                        symbol = select_symbol_interactive(trader)
                        if not symbol:
                            continue

                        timeframe = select_timeframe_interactive()
                        if not timeframe:
                            continue

                        trader.run_simple_strategy(symbol, timeframe)

                    elif choice == "3":
                        # –¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–∏–º–≤–æ–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                        symbol = select_symbol_interactive(trader)
                        if symbol:
                            trader.run_test_trade(symbol)

                    elif choice == "4":
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
                        trader.close_all_positions_interactive()

                    elif choice == "5":
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã–±–æ—Ä–æ–º —Å–∏–º–≤–æ–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                        symbol = select_symbol_interactive(trader)
                        if symbol:
                            trader.show_recent_data(symbol)

                    elif choice == "6":
                        # –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –û–±—É—á–µ–Ω–∏–µ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è
                        trader.training_and_trading_flow()

                    elif choice == "7":
                        # –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç: –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                        trader.market_analysis_flow()

                    elif choice == "0":
                        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                        break
                    else:
                        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 7.")

                    input("\nüìù –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

                except KeyboardInterrupt:
                    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                    break
                except Exception as e:
                    print(f"üí• –û—à–∏–±–∫–∞: {str(e)}")

    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        trader.shutdown()
        print("üëã AI Trader –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    main()
