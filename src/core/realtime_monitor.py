#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import time
import threading
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
import logging
from .data import DataFetcher
from .mt5 import MT5


class RealTimeMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(self, data_fetcher: DataFetcher):
        self.data_fetcher = data_fetcher
        self.logger = logging.getLogger('RealTimeMonitor')
        self.running = False
        self.thread = None
        self.subscribers = []
        self.symbols = []
        self.symbol_mapping = {}  # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        self.update_interval = 5  # —Å–µ–∫—É–Ω–¥—ã

    def start_monitoring(self, symbols: List[str], update_interval: int = 5):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            self.symbols = symbols
            self.update_interval = update_interval
            self.running = True

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
            self._initialize_symbol_mapping(symbols)

            self.thread = threading.Thread(target=self._monitoring_loop, daemon=True)
            self.thread.start()

            self.logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False

    def _initialize_symbol_mapping(self, symbols: List[str]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏"""
        self.symbol_mapping = {}

        for symbol in symbols:
            correct_symbol = self._find_correct_symbol(symbol)
            if correct_symbol:
                self.symbol_mapping[symbol] = correct_symbol
                self.logger.info(f"‚úÖ –°–∏–º–≤–æ–ª {symbol} -> {correct_symbol}")
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è {symbol}")

    def _find_correct_symbol(self, base_symbol: str) -> Optional[str]:
        """
        –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å–∏–º–≤–æ–ª–∞ —Å —É—á–µ—Ç–æ–º —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –±—Ä–æ–∫–µ—Ä–∞
        """
        possible_suffixes = ['', 'rfd', 'm', 'f', 'q', 'a', 'b', 'c', 'd', 'e']

        for suffix in possible_suffixes:
            test_symbol = base_symbol + suffix
            if self._check_symbol_exists(test_symbol):
                return test_symbol

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã
        all_symbols = self.data_fetcher.get_all_symbols()
        if all_symbols:
            for symbol in all_symbols:
                if base_symbol in symbol:
                    self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π —Å–∏–º–≤–æ–ª: {symbol} –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ {base_symbol}")
                    if self._check_symbol_exists(symbol):
                        return symbol

        return None

    def _check_symbol_exists(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
            symbol_info = self.data_fetcher.get_symbol_info(symbol)
            if symbol_info:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                price = self.data_fetcher.get_current_price(symbol)
                return price is not None and price.get('bid', 0) > 0
            return False
        except Exception as e:
            self.logger.debug(f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False
        if self.thread:
            self.thread.join(timeout=5)
        self.logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def subscribe(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞"""
        self.subscribers.append(callback)
        self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞")

    def unsubscribe(self, callback: Callable):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if callback in self.subscribers:
            self.subscribers.remove(callback)
            self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä—ã–Ω–∫–∞")

    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                market_data = self._get_real_time_data()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                for callback in self.subscribers:
                    try:
                        callback(market_data)
                    except Exception as e:
                        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")

                time.sleep(self.update_interval)

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(self.update_interval)

    def _get_real_time_data(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        market_data = {
            'timestamp': datetime.now(),
            'symbols': {},
            'market_state': 'UNKNOWN'
        }

        try:
            price_changes = []
            volumes = []
            successful_symbols = 0

            for base_symbol in self.symbols:
                symbol = self.symbol_mapping.get(base_symbol, base_symbol)

                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
                    current_price = self.data_fetcher.get_current_price(symbol)
                    if not current_price or current_price.get('bid', 0) == 0:
                        # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª
                        correct_symbol = self._find_correct_symbol(base_symbol)
                        if correct_symbol:
                            self.symbol_mapping[base_symbol] = correct_symbol
                            symbol = correct_symbol
                            current_price = self.data_fetcher.get_current_price(symbol)

                        if not current_price or current_price.get('bid', 0) == 0:
                            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol} (–±–∞–∑–æ–≤—ã–π: {base_symbol})")
                            continue

                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    data = self.data_fetcher.get_rates(symbol, 'M1', count=50)
                    if data is None or data.empty:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                        continue

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    price_change = self._calculate_price_change(data)
                    volume = data['tick_volume'].mean() if 'tick_volume' in data.columns else 0

                    symbol_data = {
                        'symbol': symbol,
                        'base_symbol': base_symbol,
                        'bid': current_price.get('bid', 0),
                        'ask': current_price.get('ask', 0),
                        'spread': current_price.get('spread', 0),
                        'price_change': price_change,
                        'volume': volume,
                        'timestamp': datetime.now(),
                        'indicators': self._calculate_realtime_indicators(data)
                    }

                    market_data['symbols'][base_symbol] = symbol_data
                    price_changes.append(price_change)
                    volumes.append(volume)
                    successful_symbols += 1

                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} (–±–∞–∑–æ–≤—ã–π: {base_symbol}): {e}")
                    continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞
            if price_changes and successful_symbols > 0:
                avg_change = sum(price_changes) / len(price_changes)
                if avg_change > 0.1:
                    market_data['market_state'] = 'BULLISH'
                elif avg_change < -0.1:
                    market_data['market_state'] = 'BEARISH'
                else:
                    market_data['market_state'] = 'SIDEWAYS'

                market_data['successful_symbols'] = successful_symbols
                market_data['total_symbols'] = len(self.symbols)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}")

        return market_data

    def _calculate_price_change(self, data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        try:
            if len(data) < 2:
                return 0.0

            current_close = data['close'].iloc[-1]
            previous_close = data['close'].iloc[-2]

            change = ((current_close - previous_close) / previous_close) * 100
            return round(change, 4)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return 0.0

    def _calculate_realtime_indicators(self, data: pd.DataFrame) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        indicators = {}

        try:
            if len(data) < 20:
                return indicators

            # RSI
            delta = data['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            indicators['rsi'] = 100 - (100 / (1 + rs)).iloc[-1]

            # –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
            indicators['sma_20'] = data['close'].rolling(window=20).mean().iloc[-1]

            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR)
            high_low = data['high'] - data['low']
            high_close = abs(data['high'] - data['close'].shift())
            low_close = abs(data['low'] - data['close'].shift())
            true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
            indicators['atr'] = true_range.rolling(window=14).mean().iloc[-1]

            # –û–±—ä–µ–º
            if 'tick_volume' in data.columns:
                indicators['volume_ma'] = data['tick_volume'].rolling(window=20).mean().iloc[-1]
                indicators['current_volume'] = data['tick_volume'].iloc[-1]

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")

        return indicators

    def get_market_summary(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä—ã–Ω–∫—É"""
        market_data = self._get_real_time_data()

        summary = {
            'timestamp': market_data['timestamp'],
            'market_state': market_data['market_state'],
            'total_symbols': len(self.symbols),
            'successful_symbols': market_data.get('successful_symbols', 0),
            'bullish_count': 0,
            'bearish_count': 0,
            'sideways_count': 0,
            'top_movers': []
        }

        for base_symbol, data in market_data['symbols'].items():
            change = data.get('price_change', 0)
            if change > 0.2:
                summary['bullish_count'] += 1
            elif change < -0.2:
                summary['bearish_count'] += 1
            else:
                summary['sideways_count'] += 1

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø –¥–≤–∏–∂—É—â–∏—Ö—Å—è
            summary['top_movers'].append({
                'symbol': base_symbol,
                'actual_symbol': data.get('symbol', ''),
                'change': change,
                'current_price': data.get('bid', 0)
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é
        summary['top_movers'].sort(key=lambda x: abs(x['change']), reverse=True)
        summary['top_movers'] = summary['top_movers'][:5]  # –¢–æ–ø 5

        return summary

    def get_symbol_mapping(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤"""
        return self.symbol_mapping.copy()

    def add_symbol(self, base_symbol: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if base_symbol not in self.symbols:
            self.symbols.append(base_symbol)
            correct_symbol = self._find_correct_symbol(base_symbol)
            if correct_symbol:
                self.symbol_mapping[base_symbol] = correct_symbol
                self.logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–∏–º–≤–æ–ª {base_symbol} -> {correct_symbol}")
                return True
            else:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∏–º–≤–æ–ª –¥–ª—è {base_symbol}")
                return False
        return True
