import MetaTrader5 as mt5
import logging
import time
from typing import Optional, Dict, Tuple, List
from datetime import datetime

logger = logging.getLogger('Trader')


class Trader:
    def __init__(self, mt5_connection):
        self.mt5 = mt5_connection
        self.logger = logger
        self.max_retries = 3
        self.retry_delay = 1

    def _retry_operation(self, operation, *args, **kwargs):
        """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏"""
        for attempt in range(self.max_retries):
            try:
                result = operation(*args, **kwargs)
                if result[0]:  # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                    return result
                self.logger.warning(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {result[1]}")
            except Exception as e:
                self.logger.warning(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –≤—ã–∑–≤–∞–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")

            if attempt < self.max_retries - 1:
                time.sleep(self.retry_delay)

        return False, "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ —É–¥–∞–ª–∏—Å—å"

    def calculate_stop_levels(self, symbol: str, price: float, order_type: str,
                              stop_loss_pips: float, take_profit_pips: float) -> Tuple[float, float]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π

        Args:
            symbol: —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            price: —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
            order_type: —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ ('buy' –∏–ª–∏ 'sell')
            stop_loss_pips: —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ –ø—É–Ω–∫—Ç–∞—Ö
            take_profit_pips: —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –≤ –ø—É–Ω–∫—Ç–∞—Ö

        Returns:
            Tuple[float, float]: (—Å—Ç–æ–ø-–ª–æ—Å—Å, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç)
        """
        try:
            symbol_info = mt5.symbol_info(symbol)
            if not symbol_info:
                return 0.0, 0.0

            point = symbol_info.point
            digits = symbol_info.digits

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            min_stop_level = symbol_info.trade_stops_level * point if symbol_info.trade_stops_level > 0 else 10 * point
            min_stop_distance = max(min_stop_level, 10 * point)  # –ú–∏–Ω–∏–º—É–º 10 –ø—É–Ω–∫—Ç–æ–≤

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –≤ –ø—É–Ω–∫—Ç–∞—Ö
            if order_type.lower() == 'buy':
                if stop_loss_pips > 0:
                    stop_loss = price - stop_loss_pips * point
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    if (price - stop_loss) < min_stop_distance:
                        stop_loss = price - min_stop_distance
                        self.logger.warning(
                            f"‚ö†Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {min_stop_distance / point:.1f} –ø—É–Ω–∫—Ç–æ–≤")
                else:
                    stop_loss = 0.0

                if take_profit_pips > 0:
                    take_profit = price + take_profit_pips * point
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    if (take_profit - price) < min_stop_distance:
                        take_profit = price + min_stop_distance
                        self.logger.warning(
                            f"‚ö†Ô∏è –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {min_stop_distance / point:.1f} –ø—É–Ω–∫—Ç–æ–≤")
                else:
                    take_profit = 0.0

            else:  # sell
                if stop_loss_pips > 0:
                    stop_loss = price + stop_loss_pips * point
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    if (stop_loss - price) < min_stop_distance:
                        stop_loss = price + min_stop_distance
                        self.logger.warning(
                            f"‚ö†Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {min_stop_distance / point:.1f} –ø—É–Ω–∫—Ç–æ–≤")
                else:
                    stop_loss = 0.0

                if take_profit_pips > 0:
                    take_profit = price - take_profit_pips * point
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    if (price - take_profit) < min_stop_distance:
                        take_profit = price - min_stop_distance
                        self.logger.warning(
                            f"‚ö†Ô∏è –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {min_stop_distance / point:.1f} –ø—É–Ω–∫—Ç–æ–≤")
                else:
                    take_profit = 0.0

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
            if stop_loss > 0:
                stop_loss = round(stop_loss, digits)
            if take_profit > 0:
                take_profit = round(take_profit, digits)

            self.logger.debug(f"üéØ –£—Ä–æ–≤–Ω–∏ –¥–ª—è {symbol}: –¶–µ–Ω–∞={price:.5f}, SL={stop_loss:.5f}, TP={take_profit:.5f}")

            return stop_loss, take_profit

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞: {str(e)}")
            return 0.0, 0.0

    def check_market_conditions(self, symbol: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            symbol_info = mt5.symbol_info(symbol)
            if not symbol_info:
                return False, f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            if symbol_info.trade_mode != mt5.SYMBOL_TRADE_MODE_FULL:
                return False, f"–¢–æ—Ä–≥–æ–≤–ª—è –¥–ª—è {symbol} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
            if not symbol_info.visible:
                return False, f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Market Watch"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–µ–¥
            tick = mt5.symbol_info_tick(symbol)
            if tick:
                spread = tick.ask - tick.bid
                point = symbol_info.point
                spread_pips = spread / point

                if spread_pips > 50:  # –ï—Å–ª–∏ —Å–ø—Ä–µ–¥ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π
                    return False, f"–°–ø—Ä–µ–¥ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π: {spread_pips:.1f} –ø—É–Ω–∫—Ç–æ–≤"

            return True, "–†—ã–Ω–æ–∫ –≥–æ—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"

        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —Ä—ã–Ω–∫–∞: {str(e)}"

    def calculate_position_size(self, symbol: str, risk_percent: float = 1.0,
                                stop_loss_pips: float = 0.0) -> Optional[float]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞"""
        try:
            account_info = mt5.account_info()
            if not account_info:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
                return None

            symbol_info = mt5.symbol_info(symbol)
            if not symbol_info:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {symbol}")
                return None

            # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è —Ä–∏—Å–∫–∞
            balance = account_info.balance
            risk_amount = balance * (risk_percent / 100.0)

            # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ª–æ—Ç–∞
            if stop_loss_pips > 0:
                # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                point = symbol_info.point
                tick_value = symbol_info.trade_tick_value
                tick_size = symbol_info.trade_tick_size

                if tick_value > 0 and tick_size > 0:
                    risk_per_pip = risk_amount / stop_loss_pips
                    lot_size = risk_per_pip / tick_value
                else:
                    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
                    lot_size = risk_amount / (stop_loss_pips * 10)
            else:
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                lot_size = risk_amount / 1000.0

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            min_lot = symbol_info.volume_min
            max_lot = symbol_info.volume_max
            step_lot = symbol_info.volume_step

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —à–∞–≥–∞
            if step_lot > 0:
                lot_size = round(lot_size / step_lot) * step_lot

            lot_size = max(min_lot, min(lot_size, max_lot))
            lot_size = round(lot_size, 2)

            self.logger.info(f"üìè –†–∞—Å—Å—á–∏—Ç–∞–Ω –ª–æ—Ç {lot_size} –¥–ª—è {symbol} —Å —Ä–∏—Å–∫–æ–º {risk_percent}%")
            return lot_size

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {str(e)}")
            return None

    def send_order(self, symbol: str, order_type: str, volume: float,
                   stop_loss_pips: float = 0.0, take_profit_pips: float = 0.0,
                   deviation: int = 20, comment: str = "AI Trader") -> Tuple[bool, str]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –Ω–∞ —Ä—ã–Ω–æ–∫

        Args:
            symbol: —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            order_type: —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞ ('buy' –∏–ª–∏ 'sell')
            volume: –æ–±—ä–µ–º –≤ –ª–æ—Ç–∞—Ö
            stop_loss_pips: —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö
            take_profit_pips: —É—Ä–æ–≤–µ–Ω—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –ø—É–Ω–∫—Ç–∞—Ö
            deviation: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            comment: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ä–¥–µ—Ä—É

        Returns:
            Tuple[bool, str]: (–£—Å–ø–µ—à–Ω–æ—Å—Ç—å, –°–æ–æ–±—â–µ–Ω–∏–µ)
        """
        return self._retry_operation(self._send_order_impl, symbol, order_type, volume,
                                     stop_loss_pips, take_profit_pips, deviation, comment)

    def _send_order_impl(self, symbol: str, order_type: str, volume: float,
                         stop_loss_pips: float = 0.0, take_profit_pips: float = 0.0,
                         deviation: int = 20, comment: str = "AI Trader") -> Tuple[bool, str]:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞"""
        try:
            if not self.mt5.check_connection():
                return False, "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MT5"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è —Ä—ã–Ω–∫–∞
            market_ok, market_msg = self.check_market_conditions(symbol)
            if not market_ok:
                return False, market_msg

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            tick = mt5.symbol_info_tick(symbol)
            if tick is None:
                return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            symbol_info = mt5.symbol_info(symbol)
            if not symbol_info:
                return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ {symbol}"

            if order_type.lower() == 'buy':
                order_type_mt5 = mt5.ORDER_TYPE_BUY
                price = tick.ask
            elif order_type.lower() == 'sell':
                order_type_mt5 = mt5.ORDER_TYPE_SELL
                price = tick.bid
            else:
                return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_type}"

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            stop_loss, take_profit = self.calculate_stop_levels(
                symbol, price, order_type, stop_loss_pips, take_profit_pips
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–µ —Ä–∞–≤–Ω—ã —Ü–µ–Ω–µ
            if stop_loss > 0 and abs(stop_loss - price) < symbol_info.point:
                return False, "–°—Ç–æ–ø-–ª–æ—Å—Å —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è"

            if take_profit > 0 and abs(take_profit - price) < symbol_info.point:
                return False, "–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è"

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": symbol,
                "volume": volume,
                "type": order_type_mt5,
                "price": price,
                "sl": stop_loss,
                "tp": take_profit,
                "deviation": deviation,
                "magic": 202400,
                "comment": comment,
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_FOK,
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
            result = mt5.order_send(request)

            if result.retcode != mt5.TRADE_RETCODE_DONE:
                error_msg = f"–û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ {result.retcode}: {self._get_trade_error_description(result.retcode)}"
                self.logger.error(error_msg)
                return False, error_msg

            success_msg = f"‚úÖ –û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω: {order_type.upper()} {volume} {symbol} –ø–æ —Ü–µ–Ω–µ {price:.5f}"
            if stop_loss_pips > 0:
                success_msg += f", SL: {stop_loss:.5f} ({stop_loss_pips} –ø.)"
            if take_profit_pips > 0:
                success_msg += f", TP: {take_profit:.5f} ({take_profit_pips} –ø.)"

            self.logger.info(success_msg)
            return True, success_msg

        except Exception as e:
            error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ä–¥–µ—Ä–∞: {str(e)}"
            self.logger.error(error_msg)
            return False, error_msg

    def _get_trade_error_description(self, error_code: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ—à–∏–±–∫–∏ MT5"""
        error_descriptions = {
            mt5.TRADE_RETCODE_REQUOTE: "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∫–æ—Ç–∏—Ä–æ–≤–∫–∞",
            mt5.TRADE_RETCODE_REJECT: "–û—Ä–¥–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω",
            mt5.TRADE_RETCODE_CANCEL: "–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω",
            mt5.TRADE_RETCODE_PLACED: "–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω",
            mt5.TRADE_RETCODE_DONE: "–û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω",
            mt5.TRADE_RETCODE_DONE_PARTIAL: "–û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ",
            mt5.TRADE_RETCODE_ERROR: "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞",
            mt5.TRADE_RETCODE_TIMEOUT: "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞",
            mt5.TRADE_RETCODE_INVALID: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
            mt5.TRADE_RETCODE_INVALID_VOLUME: "–ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–º",
            mt5.TRADE_RETCODE_INVALID_PRICE: "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞",
            mt5.TRADE_RETCODE_INVALID_STOPS: "–ù–µ–≤–µ—Ä–Ω—ã–µ —Å—Ç–æ–ø-—É—Ä–æ–≤–Ω–∏",
            mt5.TRADE_RETCODE_TRADE_DISABLED: "–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞",
            mt5.TRADE_RETCODE_MARKET_CLOSED: "–†—ã–Ω–æ–∫ –∑–∞–∫—Ä—ã—Ç",
            mt5.TRADE_RETCODE_NO_MONEY: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
            mt5.TRADE_RETCODE_PRICE_CHANGED: "–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å",
            mt5.TRADE_RETCODE_PRICE_OFF: "–ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫",
            mt5.TRADE_RETCODE_INVALID_EXPIRATION: "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏",
            mt5.TRADE_RETCODE_ORDER_CHANGED: "–û—Ä–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω",
            mt5.TRADE_RETCODE_TOO_MANY_REQUESTS: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
            mt5.TRADE_RETCODE_NO_CHANGES: "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π",
            mt5.TRADE_RETCODE_SERVER_DISABLES_AT: "–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∑–∞–ø—Ä–µ—â–µ–Ω",
            mt5.TRADE_RETCODE_CLIENT_DISABLES_AT: "–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –∫–ª–∏–µ–Ω—Ç–æ–º",
            mt5.TRADE_RETCODE_LOCKED: "–û—Ä–¥–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            mt5.TRADE_RETCODE_FROZEN: "–û—Ä–¥–µ—Ä –∑–∞–º–æ—Ä–æ–∂–µ–Ω",
            mt5.TRADE_RETCODE_INVALID_FILL: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è",
            mt5.TRADE_RETCODE_CONNECTION: "–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            mt5.TRADE_RETCODE_ONLY_REAL: "–¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞",
            mt5.TRADE_RETCODE_LIMIT_ORDERS: "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–æ–≤",
            mt5.TRADE_RETCODE_LIMIT_VOLUME: "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–±—ä–µ–º–∞",
            mt5.TRADE_RETCODE_INVALID_ORDER: "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ä–¥–µ—Ä",
            mt5.TRADE_RETCODE_POSITION_CLOSED: "–ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞",
        }

        return error_descriptions.get(error_code, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {error_code}")

    def get_open_positions(self, symbol: str = "") -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            positions = mt5.positions_get(symbol=symbol) if symbol else mt5.positions_get()
            if positions is None:
                return []

            if not positions:
                return []

            result = []
            for position in positions:
                try:
                    pos_data = {
                        'ticket': position.ticket,
                        'symbol': position.symbol,
                        'type': 'BUY' if position.type == mt5.ORDER_TYPE_BUY else 'SELL',
                        'volume': position.volume,
                        'open_price': position.price_open,
                        'current_price': position.price_current,
                        'sl': position.sl,
                        'tp': position.tp,
                        'profit': position.profit,
                        'swap': position.swap,
                        'time': datetime.fromtimestamp(position.time)
                    }
                    result.append(pos_data)
                except AttributeError as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
                    continue
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
                    continue

            return result

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {str(e)}")
            return []

    def close_position(self, ticket: int, deviation: int = 20) -> Tuple[bool, str]:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ ticket"""
        return self._retry_operation(self._close_position_impl, ticket, deviation)

    def _close_position_impl(self, ticket: int, deviation: int = 20) -> Tuple[bool, str]:
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            positions = mt5.positions_get(ticket=ticket)
            if not positions:
                return False, f"–ü–æ–∑–∏—Ü–∏—è —Å ticket {ticket} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            position = positions[0]
            symbol = position.symbol
            volume = position.volume
            order_type = position.type

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–¥–µ–ª–∫–∏
            if order_type == mt5.ORDER_TYPE_BUY:
                close_type = mt5.ORDER_TYPE_SELL
                price = mt5.symbol_info_tick(symbol).bid
            else:
                close_type = mt5.ORDER_TYPE_BUY
                price = mt5.symbol_info_tick(symbol).ask

            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "position": ticket,
                "symbol": symbol,
                "volume": volume,
                "type": close_type,
                "price": price,
                "deviation": deviation,
                "magic": 202400,
                "comment": "Closed by AI Trader",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mt5.ORDER_FILLING_FOK,
            }

            result = mt5.order_send(request)

            if result.retcode != mt5.TRADE_RETCODE_DONE:
                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {self._get_trade_error_description(result.retcode)}"
                return False, error_msg

            return True, f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {ticket} –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ —Ü–µ–Ω–µ {price:.5f}"

        except Exception as e:
            error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {str(e)}"
            self.logger.error(error_msg)
            return False, error_msg

    def close_all_positions(self, symbol: str = "") -> Tuple[bool, str]:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            positions = self.get_open_positions(symbol)
            if not positions:
                return True, "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è"

            results = []
            for position in positions:
                success, message = self.close_position(position['ticket'])
                results.append(f"Position {position['ticket']}: {message}")
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            return True, " | ".join(results)

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: {str(e)}"
            self.logger.error(error_msg)
            return False, error_msg

    def get_account_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É"""
        try:
            account_info = self.mt5.get_account_info()
            positions = self.get_open_positions()

            total_profit = sum(pos['profit'] + pos['swap'] for pos in positions)
            total_volume = sum(pos['volume'] for pos in positions)

            return {
                'account_info': account_info,
                'open_positions': len(positions),
                'total_profit': total_profit,
                'total_volume': total_volume,
                'positions_by_symbol': {pos['symbol']: pos['volume'] for pos in positions}
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {str(e)}")
            return {}
